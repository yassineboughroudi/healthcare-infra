services:
  ##################################################################
  # Infrastructure Services
  ##################################################################
  consul:
    image: consul:1.15
    container_name: consul
    ports:
      - "8500:8500"
    networks:
      - my-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8500/v1/status/leader"]
      interval: 5s
      timeout: 10s
      retries: 5

  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    ports:
      - "5672:5672"
      - "15672:15672"
    networks:
      - my-network
    healthcheck:
      test: ["CMD-SHELL", "rabbitmqctl status"]
      interval: 5s
      timeout: 10s
      retries: 5

  mongo-db:
    image: mongo:latest
    container_name: mongo-db
    ports:
      - "27017:27017"
    networks:
      - my-network
    # (Optional) If you want a healthcheck for Mongo:
    # healthcheck:
    #   test: ["CMD-SHELL", "mongo --eval 'db.runCommand({ ping: 1 })' || exit 1"]
    #   interval: 10s
    #   timeout: 5s
    #   retries: 5

  postgres-billing-db:
    image: postgres:15
    container_name: postgres-billing-db
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: root
      POSTGRES_DB: billing_db
    ports:
      - "5432:5432"
    networks:
      - my-network
    volumes:
      - postgres-billing-data:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d  # Ensures DB and users are created
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 10s
      retries: 5

  postgres-scheduling-db:
    image: postgres:15
    container_name: postgres-scheduling-db
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: root
      POSTGRES_DB: scheduling_db
    ports:
      - "5433:5432"
    networks:
      - my-network
    volumes:
      - postgres-scheduling-data:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d  # Ensures DB and users are created
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 10s
      retries: 5

  ##################################################################
  # Microservices
  ##################################################################
  config-server:
    image: docker.io/boughroudi/config-server:latest
    container_name: config-server
    environment:
      - SPRING_CLOUD_CONFIG_URI=http://config-server:8080
      - SPRING_CLOUD_CONSUL_HOST=consul
      - SPRING_CLOUD_CONSUL_PORT=8500
    ports:
      - "8888:8080"
    networks:
      - my-network
    depends_on:
      consul:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 5s
      timeout: 5s
      retries: 5

  patient-management-service:
    image: docker.io/boughroudi/patient-management-service:latest
    container_name: patient-management-service
    ports:
      - "8082:8080"
    restart: on-failure
    networks:
      - my-network
    depends_on:
      config-server:
        condition: service_healthy
      consul:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8080/actuator/health || exit 1"]
      interval: 5s
      timeout: 5s
      retries: 5

  billing-service:
    image: docker.io/boughroudi/billing-service:latest
    container_name: billing-service
    restart: on-failure
    ports:
      - "8086:8080"
    networks:
      - my-network
    depends_on:
      config-server:
        condition: service_healthy
      consul:
        condition: service_healthy
      postgres-billing-db:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8080/actuator/health || exit 1"]
      interval: 10s
      timeout: 10s
      retries: 5

  scheduling-service:
    image: docker.io/boughroudi/scheduling-service:latest
    container_name: scheduling-service
    restart: on-failure
    ports:
      - "8083:8080"
    networks:
      - my-network
    depends_on:
      config-server:
        condition: service_healthy
      consul:
        condition: service_healthy
      postgres-scheduling-db:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8080/actuator/health || exit 1"]
      interval: 5s
      timeout: 5s
      retries: 5

  kidney-stone-service:
    image: docker.io/boughroudi/kidney-stone-service:latest
    container_name: kidney-stone-service
    restart: on-failure
    environment:
      - MONGODB_URI=mongodb://mongo-db:27017
      - RABBITMQ_HOST=rabbitmq
      - RABBITMQ_PORT=5672
    networks:
      - my-network
    ports:
      - "8000:8000"
    depends_on:
      mongo-db:
        # If you want a healthcheck for Mongo, also use condition: service_healthy
        condition: service_started
      config-server:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      patient-management-service:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8000/health || exit 1"]
      interval: 5s
      timeout: 5s
      retries: 5

  gateway-service:
    image: docker.io/boughroudi/gateway-service:latest
    container_name: gateway-service
    restart: on-failure
    ports:
      - "9999:8080"
    networks:
      - my-network
    depends_on:
      consul:
        condition: service_healthy
      config-server:
        condition: service_healthy
      kidney-stone-service:
        condition: service_healthy
      patient-management-service:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8080/actuator/health || exit 1"]
      interval: 5s
      timeout: 5s
      retries: 5

networks:
  my-network:
    driver: bridge

volumes:
  postgres-billing-data:
  postgres-scheduling-data:

